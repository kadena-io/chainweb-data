name: Build project

on: push

jobs:
  build:
    name: Build master with ${{ matrix.ghc }} / ${{ matrix.cabal }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.8.4']
        cabal: ['3.4']
        os: ['ubuntu-20.04', 'ubuntu-22.04', 'macOS-latest']

    steps:
    - name: 'GitHub actions env workaround'
      run: 'echo "ACTIONS_ALLOW_UNSECURE_COMMANDS=true" >> $GITHUB_ENV'

    # Setup
    - name: Checkout repository
      uses: actions/checkout@v1

    # Haskell Setup
    - name: Install GHC and Cabal
      uses: haskell/actions/setup@v1.2.3
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Confirm GHC and Cabal installation
      run: |
        ghc --version
        cabal --version
    # Project Setup
    - uses: actions/cache@v2
      name: Cache dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ matrix.os }}-${{ matrix.ghc }}-4-cabal

    # Build
    - name: Update package database
      run: cabal update
    - name: Display outdated packages
      run: cabal outdated
    - name: Install build dependencies
      run: cabal build --only-dependencies
    - name: Build
      run: cabal build

    # Upload artifacts
    - name: Copy build artifact
      run: cp `cabal list-bin exe:chainweb-data` .
    - name: Stripping binary
      run: strip chainweb-data
    - uses: actions/upload-artifact@v2
      with:
        name: chainweb-data-build-${{ matrix.os }}
        path: chainweb-data

    # Test
    - name: Test
      run: cabal v2-test

  dockerize:
    name: Release Docker image with nix
    runs-on: ubuntu-latest
    env:
      ghcr_image_name: ghcr.io/kadena-io/chainweb-data
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1
  
      ## Question: why are we doing this build with nix instead of the normal docker builds?
      ## Answer: the nix docker build was made so we're trying it out to see how it goes!
      
      - name: configure nix
        uses: cachix/install-nix-action@v18
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            substituters = https://nixcache.chainweb.com https://cache.nixos.org/ http://nixcache.kadena.io https://nixcache.reflex-frp.org
            trusted-public-keys = nixcache.chainweb.com:FVN503ABX9F8x8K0ptnc99XEz5SaA4Sks6kNcZn2pBY= kadena-cache.local-1:8wj8JW8V9tmc5bgNNyPM18DYNA1ws3X/MChXh1AQy/Q= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= ryantrinkle.com-1:JJiAKaRv9mWgpVAz8dwewnZe0AzzEAzPkagE9SP5NWI=
      - run: nix-build docker.nix
  
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Load nix built docker image
        run: |
          #docker load -i $(readlink result)
          docker load < result
          docker tag chainweb-data:latest $ghcr_image_name:latest
          #      docker tag chainweb-data:latest $ghcr_image_name:$(git rev-parse --short "$GITHUB_SHA")
          docker image push --all-tags $ghcr_image_name
  
      # this may or may not work to tag the image
      - name: Docker meta via action
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/kadena-io/chainweb-data
            #        flavor: |
            #suffix=${{ needs.config.outputs.tag-suffix }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
      
      - name: Push image to ghcr
        run: |
          docker image push --all-tags $ghcr_image_name
       
